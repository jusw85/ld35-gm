<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_idle1</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10000</depth>
  <persistent>0</persistent>
  <parentName>obj_entity</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
mask = instance_create(x, y, obj_mask);
mask.sprite_index = spr_mask1;

can_lock = false;
locked = false; zhold=0

inventory[0] = true;
inventory[1] = false;
inventory[2] = false;
current_inventory = 0;

respawn_x = x;
respawn_y = y;
death=false
death_timer=0 spawn_timer=90 c_color=c_green

spr_idle = spr_idle1;
spr_walk = spr_walk1;
spr_jump = spr_jump1;

spsme = part_system_create();
part_system_depth(spsme, -100 );
sptme = part_type_create();
part_type_shape(sptme,pt_shape_flare)
part_type_colour1(sptme, c_color);
part_type_life(sptme, 100, 150);
part_type_speed(sptme, 0.4, 0.8, 0, 0);
part_type_direction(sptme, 90, 90, 0, 5);
part_type_size(sptme, 0.2, 0.4, -0.01, 0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>view_xview[0] = x - (view_wview[0] / 2);
view_yview[0] = y - (view_hview[0] / 2); 

if (!locked) {
    mask.x = x;
    mask.y = y;
    mask.lock=false
}
if spawn_timer&gt;0 //spawn particle effect
    {
    spawn_timer-=1
    part_type_colour1(sptme, c_color);
    part_particles_create(spsme, x+random_range(-16,16), y+random_range(-16,16), sptme, 1);
    }

if death=true 
    {
    death_timer+=1 
    image_alpha=0
    if death_timer=1 //death animation
        {
        audio_play_sound(snd_death, 0, false); 
        repeat(5)
            {rrr=instance_create(x,y,obj_death)
            rrr.vspeed=-5-random(5)
            rrr.hspeed=random_range(-4,4)
            }
        }
    if death_timer&gt;=120
        {
        death=false
        death_timer=0 spawn_timer=90
        x = respawn_x;
        y = respawn_y-32;
        image_alpha=1
        locked=false
         mask.x = x;
        mask.y = y;
        }
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();

if (current_inventory=0){c_color=c_lime}
if (current_inventory=1){c_color=c_red}
if (current_inventory=2){c_color=c_blue}

switch (current_inventory) {
    case 0:
        mask.sprite_index = spr_mask1;
        spr_idle = spr_idle1;
        spr_walk = spr_walk1;
        spr_jump = spr_jump1;
        break;
    case 1:
        mask.sprite_index = spr_mask2;
        spr_idle = spr_idle2;
        spr_walk = spr_walk2;
        spr_jump = spr_jump2;
        break;
    case 2:
        mask.sprite_index = spr_mask3;
        spr_idle = spr_idle3;
        spr_walk = spr_walk3;
        spr_jump = spr_jump3;
        break;
}

if (state == STATE_JUMPING &amp;&amp; !place_free(x, y + 1)) {
    state = STATE_IDLE;
}

if (state == STATE_IDLE) {
    image_speed = 0.1;
    sprite_index = spr_idle;
} else if (state == STATE_MOVING) {
    image_speed = 0.25;
    sprite_index = spr_walk;
} else if (state == STATE_JUMPING) {
    image_speed = 0.25;
    sprite_index = spr_jump;
    if (image_index &gt;= image_number - 1) {
        image_speed = 0;
    }
}

if zhold=1
{audio_play_sound(snd_energy, 0, false);
audio_play_sound(snd_freeze, 0, false);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_checkpoint">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>respawn_x = other.x;
respawn_y = other.y;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_powerup_freeze">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>can_lock = true;
audio_play_sound(snd_powerup, 0, false);
with (other) {
    instance_destroy();
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_powerup">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>audio_play_sound(snd_powerup, 0, false);
inventory[other.inventory_idx] = true;
with (other) {
    instance_destroy();
}
spawn_timer=30
if (!locked) {
    do {
        current_inventory = ++current_inventory mod 3;
    } until (inventory[current_inventory])
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_spike">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//audio_play_sound(snd_death, 0, false);

death=true


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_door">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>other.door=true

//room_goto_next();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (can_lock)  &amp;&amp;death=false{
    locked = true;
    mask.lock=true
zhold+=1
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == STATE_IDLE || state == STATE_MOVING)&amp;&amp;death=false {
    move_check_collision(4, 0);
    facing = FACING_RIGHT;
    state = STATE_MOVING;
} else if (state == STATE_JUMPING)&amp;&amp;death=false {
    move_check_collision(4, 0);
    facing = FACING_RIGHT;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="38">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// standing on floor
if (state == STATE_MOVING || state == STATE_IDLE) &amp;&amp;death=false{
    if (!place_free(x, y + 1)) {
        vspeed = -9.6;
    }
    state = STATE_JUMPING;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="5" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == STATE_IDLE || state == STATE_MOVING) &amp;&amp;death=false{
    move_check_collision(-4, 0);
    facing = FACING_LEFT;
    state = STATE_MOVING;
} else if (state == STATE_JUMPING) &amp;&amp;death=false{
    move_check_collision(-4, 0);
    facing = FACING_LEFT;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!locked) {
    spawn_timer=30
    do {
        current_inventory = ++current_inventory mod 3;
    } until (inventory[current_inventory])
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="90">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (can_lock) &amp;&amp;death=false{
    locked = false;
    var fakemask = instance_create(mask.x, mask.y, obj_mask_fade);
    fakemask.sprite_index = mask.sprite_index;
    with (mask) {
        instance_destroy();
    }
    mask = instance_create(x, y, obj_mask);
    zhold=0
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="39">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == STATE_MOVING) {
    state = STATE_IDLE;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="37">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (state == STATE_MOVING) {
    state = STATE_IDLE;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
